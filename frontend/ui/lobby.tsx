import * as React from 'react';
import axios from 'axios';
import CustomWords from '~/ui/custom_words';
import WordSetToggle from '~/ui/wordset_toggle';
import TimerSettings from '~/ui/timer_settings';
import OriginalWords from '~/words.json';
import websocket from '~/ui/websocket';
import { Settings } from '~/ui/settings';

export const Lobby = ({ autogeneratedGameID }) => {
  const [newGameName, setNewGameName] = React.useState(
    localStorage.getItem('gameName') ?? autogeneratedGameID
  );
  const [playerId, setPlayerId] = React.useState(
    localStorage.getItem('playerId')
  );
  const [playerIds, setPlayerIds] = React.useState([]);
  const [selectedWordSets, setSelectedWordSets] = React.useState([
    'English (Original)',
  ]);
  const [customWordsText, setCustomWordsText] = React.useState('');
  const [words, setWords] = React.useState({ ...OriginalWords, Custom: [] });
  const [warning, setWarning] = React.useState(null);
  const [timer, setTimer] = React.useState(null);
  const [handSize, setHandSize] = React.useState(2);
  const [boardSize, setBoardSize] = React.useState(
    Settings.load().boardSize ?? 4
  );
  const [enforceTimerEnabled, setEnforceTimerEnabled] = React.useState(false);

  let selectedWordCount = selectedWordSets
    .map((l) => words[l].length)
    .reduce((a, cv) => a + cv, 0);

  React.useEffect(() => {
    if (selectedWordCount >= 25) {
      setWarning(null);
    }
  }, [selectedWordSets, customWordsText]);

  let wsConn = null;

  function connectToWs() {
    wsConn = websocket.connect(newGameName, playerId);

    wsConn.onmessage = function (event) {
      let gameState = JSON.parse(event.data);
      setPlayerIds(gameState.player_ids);
      if (gameState.words != null && gameState.words.length > 0) {
        startGame(null);
      }
    };
  }

  function startGame(e) {
    if (e != null) {
      e.preventDefault();
    }

    let combinedWordSet = selectedWordSets
      .map((l) => words[l])
      .reduce((a, w) => a.concat(w), []);

    if (combinedWordSet.length < 25) {
      setWarning('Selected wordsets do not include at least 25 words.');
      return;
    }

    axios
      .post('/next-game', {
        game_id: newGameName,
        player_id: playerId,
        word_set: combinedWordSet,
        create_new: true,
        timer_duration_ms:
          timer && timer.length ? timer[0] * 60 * 1000 + timer[1] * 1000 : 0,
        enforce_timer: timer && timer.length && enforceTimerEnabled,
        hand_size: playerIds.length > 3 ? 1 : 2,
        board_size: boardSize,
      })
      .then(({ data }) => {
        const newURL = (document.location.pathname = '/' + newGameName);
        window.location = newURL;
      });
  }

  function handleConnectToGame(e) {
    e.preventDefault();

    if (!newGameName) {
      return;
    }

    connectToWs();
  }

  let toggleWordSet = (wordSet) => {
    let wordSets = [...selectedWordSets];
    let index = wordSets.indexOf(wordSet);

    if (index == -1) {
      wordSets.push(wordSet);
    } else {
      wordSets.splice(index, 1);
    }
    setSelectedWordSets(wordSets);
  };

  let langs = Object.keys(OriginalWords);
  langs.sort();

  return (
    <div id="lobby">
      <div id="available-games">
        <form id="new-game">
          <p className="intro">
            Play CrossClues online across multiple devices on a shared board. To
            create a new game or join an existing game, enter a game identifier
            and click 'GO'.
            <br></br>
            <a
              className="url"
              href={'http://store.blueorangegames.com/p/cross-clues'}
            >
              Buy a physical copy of Cross Clues from the producer here!
            </a>
          </p>
          <input
            type="text"
            id="game-name"
            aria-label="game identifier"
            autoFocus
            onChange={(e) => {
              setNewGameName(e.target.value);
              localStorage.setItem('gameName', e.target.value);
            }}
            placeholder="Game ID"
            value={newGameName}
          />

          <input
            type="text"
            id="game-name"
            aria-label="player name"
            onChange={(e) => {
              setPlayerId(e.target.value);
              localStorage.setItem('playerId', e.target.value);
            }}
            placeholder="Player Name"
            value={playerId}
          />

          <br></br>

          <button disabled={!newGameName.length} onClick={handleConnectToGame}>
            Connect
          </button>

          <div className={'playerIds'}>
            {playerIds.length > 0 ? (
              <span key="title">Current Players:</span>
            ) : (
              <span></span>
            )}
            {playerIds.map((w, idx) => (
              <span key={idx}>{w}</span>
            ))}
          </div>

          <button disabled={!newGameName.length} onClick={startGame}>
            Start
          </button>

          {warning !== null ? (
            <div className="warning">{warning}</div>
          ) : (
            <div></div>
          )}

          <div id="game-settings">
            <div id="timer-duration">
              <span>Board Size:</span>
              <input
                type="number"
                name="board-size"
                id="board-size"
                min={3}
                max={5}
                value={boardSize}
                onChange={(e) => {
                  // TODO: Cleanup this mess
                  let val = parseInt(e?.target?.value);
                  let settings = Settings.load();
                  settings.boardSize = val;
                  Settings.save(settings);
                  setBoardSize(val);
                }}
              />
            </div>
          </div>

          <TimerSettings
            {...{
              timer,
              setTimer,
              enforceTimerEnabled,
              setEnforceTimerEnabled,
            }}
          />

          <div id="new-game-options">
            <div id="wordsets">
              <p className="instruction">
                You've selected <strong>{selectedWordCount}</strong> words.
              </p>
              <div id="default-wordsets">
                {langs.map((_label) => (
                  <WordSetToggle
                    key={_label}
                    words={words[_label]}
                    label={_label}
                    selected={selectedWordSets.includes(_label)}
                    onToggle={(e) => toggleWordSet(_label)}
                  ></WordSetToggle>
                ))}
              </div>

              <CustomWords
                words={customWordsText}
                onWordChange={(w) => {
                  setCustomWordsText(w);
                  setWords({
                    ...words,
                    Custom: w
                      .trim()
                      .split(',')
                      .map((w) => w.trim())
                      .filter((w) => w.length > 0),
                  });
                }}
                selected={selectedWordSets.includes('Custom')}
                onToggle={(e) => toggleWordSet('Custom')}
              />
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};
